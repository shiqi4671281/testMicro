// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: proto/user/user.proto

package user

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for User service

type UserService interface {
	SentSms(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	RegisterModel(ctx context.Context, in *RegReq, opts ...client.CallOption) (*Response, error)
	GetallArea(ctx context.Context, in *Request, opts ...client.CallOption) (*Resp, error)
	LoginUser(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*Response, error)
	GetUserInfo(ctx context.Context, in *UserName, opts ...client.CallOption) (*Resp, error)
	UpdataUser(ctx context.Context, in *UpdataName, opts ...client.CallOption) (*Response, error)
}

type userService struct {
	c    client.Client
	name string
}

func NewUserService(name string, c client.Client) UserService {
	if c == nil {
		c = client.NewClient()
	}
	if len(name) == 0 {
		name = "go.micro.srv.user"
	}
	return &userService{
		c:    c,
		name: name,
	}
}

func (c *userService) SentSms(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "User.SentSms", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) RegisterModel(ctx context.Context, in *RegReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "User.RegisterModel", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetallArea(ctx context.Context, in *Request, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "User.GetallArea", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) LoginUser(ctx context.Context, in *LoginReq, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "User.LoginUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) GetUserInfo(ctx context.Context, in *UserName, opts ...client.CallOption) (*Resp, error) {
	req := c.c.NewRequest(c.name, "User.GetUserInfo", in)
	out := new(Resp)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userService) UpdataUser(ctx context.Context, in *UpdataName, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.name, "User.UpdataUser", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for User service

type UserHandler interface {
	SentSms(context.Context, *Request, *Response) error
	RegisterModel(context.Context, *RegReq, *Response) error
	GetallArea(context.Context, *Request, *Resp) error
	LoginUser(context.Context, *LoginReq, *Response) error
	GetUserInfo(context.Context, *UserName, *Resp) error
	UpdataUser(context.Context, *UpdataName, *Response) error
}

func RegisterUserHandler(s server.Server, hdlr UserHandler, opts ...server.HandlerOption) error {
	type user interface {
		SentSms(ctx context.Context, in *Request, out *Response) error
		RegisterModel(ctx context.Context, in *RegReq, out *Response) error
		GetallArea(ctx context.Context, in *Request, out *Resp) error
		LoginUser(ctx context.Context, in *LoginReq, out *Response) error
		GetUserInfo(ctx context.Context, in *UserName, out *Resp) error
		UpdataUser(ctx context.Context, in *UpdataName, out *Response) error
	}
	type User struct {
		user
	}
	h := &userHandler{hdlr}
	return s.Handle(s.NewHandler(&User{h}, opts...))
}

type userHandler struct {
	UserHandler
}

func (h *userHandler) SentSms(ctx context.Context, in *Request, out *Response) error {
	return h.UserHandler.SentSms(ctx, in, out)
}

func (h *userHandler) RegisterModel(ctx context.Context, in *RegReq, out *Response) error {
	return h.UserHandler.RegisterModel(ctx, in, out)
}

func (h *userHandler) GetallArea(ctx context.Context, in *Request, out *Resp) error {
	return h.UserHandler.GetallArea(ctx, in, out)
}

func (h *userHandler) LoginUser(ctx context.Context, in *LoginReq, out *Response) error {
	return h.UserHandler.LoginUser(ctx, in, out)
}

func (h *userHandler) GetUserInfo(ctx context.Context, in *UserName, out *Resp) error {
	return h.UserHandler.GetUserInfo(ctx, in, out)
}

func (h *userHandler) UpdataUser(ctx context.Context, in *UpdataName, out *Response) error {
	return h.UserHandler.UpdataUser(ctx, in, out)
}
